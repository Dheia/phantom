#include <pd/pi/pi.H>

#include <pd/base/out_fd.H>

#include <stdio.h> // for vsnprintf
#include <errno.h>

using namespace pd;

static char outbuf[1024];
static out_fd_t out(outbuf, sizeof(outbuf), 1);

class backend_test_t : public log::backend_t {
	virtual void commit(iovec const *iov, size_t count) const throw();
	virtual log::level_t level() const throw();

public:
	inline backend_test_t() throw() { }
	inline ~backend_test_t() throw() { }
};

log::level_t backend_test_t::level() const throw() { return log::debug; }

void backend_test_t::commit(iovec const *iov, size_t count) const throw() {
	while(count--) {
		out(str_t((char const *)iov->iov_base, iov->iov_len));
		++iov;
	}
}

static backend_test_t const backend_test;

class handler_test_t : log::handler_t {
	virtual void vput(
		log::level_t level, log::aux_t const *aux, char const *format, va_list vargs
	) const throw();

public:
	inline handler_test_t() throw() :
		log::handler_t(STRING("test"), &backend_test) { }

	inline ~handler_test_t() throw() { }
};

void handler_test_t::vput(
	log::level_t, log::aux_t const *aux, char const *format, va_list args
) const throw() {
	int __errno = errno;
	char buf[1024];
	size_t size = vsnprintf(buf, sizeof(buf), format, args);
	minimize(size, sizeof(buf));
	out(str_t(buf, size)).lf();
	if(aux) {
		// aux->print(out);
		out(CSTR("some aux info present")).lf();
	}

	errno = __errno;
}

static handler_test_t const handler_test;

struct mem_test_t : public pi_t::mem_t {
	virtual void *alloc(size_t size) const { return ::operator new(size); }
	virtual void free(void *ptr) const { return ::operator delete(ptr); }

	inline mem_test_t() throw() { }
	inline ~mem_test_t() throw() { }
};

static mem_test_t const mem_test;
